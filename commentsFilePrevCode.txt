import React, { Component } from "react";
import {
  StyleSheet,
  Text,
  Button,
  View,
  TextInput,
  ScrollView,
  TouchableOpacity,
  TouchableWithoutFeedback,
  Keyboard,
} from "react-native";
import {
  Entypo,
  Ionicons,
  FontAwesome,
  AntDesign,
  MaterialIcons,
} from "@expo/vector-icons";

// import CustomButton from "./components/ButtonComponent";
import InputAddView from "./components/InputAddComponent";
import ScrollViewItem from "./components/ScrollViewItemComponent";

class App extends Component {
  state = {
    text: "",
    List: [],
  };

  handleInput = (text) => {
    this.setState({ text: text });
  };

  addItem = () => {
    if (this.state.text === "") {
      alert("Cannot add Nothing");
    } else {
      const newList = [...this.state.List];
      newList.push({ key: Math.random().toString(), data: this.state.text });
      this.setState({ text: "", List: newList });
    }
  };

  removeItem = (itemKey) => {
    const updatedList = [...this.state.List];
    updatedList.splice(itemKey, 1);
    this.setState({ List: updatedList });
  };

  updateItem = (item) => {
    if (this.state.text === item.data || this.state.text === "") {
      alert(" Nothing to Update");
    } else {
      const updateItemIndex = this.state.List.findIndex((l) => {
        // console.log(l.key);
        // console.log(item.key);
        // console.log(l.key === item.key);
        return l.key === item.key;
      });
      const updateItem = { ...this.state.List[updateItemIndex] };
      updateItem.data = this.state.text;
      // console.log(updateItem);
      const updatedItemList = [...this.state.List];
      updatedItemList[updateItemIndex] = updateItem;
      this.setState({ text: "", List: updatedItemList });
      // console.log(updatedItemList);
    }
  };

  render() {
    return (
      <TouchableWithoutFeedback onPress={() => { Keyboard.dismiss() }}>

        <View style={styles.container}>
          <Text style={styles.title}>My List</Text>
            <InputAddView 
                placeholder="Enter toDo" 
                changeText = {this.handleInput} 
                valueText = {this.state.text} 
                addItemProp = {this.addItem}
                />
     {/*************   <View style={styles.inputContainer}>
            <TextInput
              style={styles.textInput}
              placeholder="Enter toDo"
              onChangeText={this.handleInput}
              value={this.state.text}
            />
            <CustomButton name="add-to-list" addEvent={this.addItem} />
         </View> ***************/}
        <View>
            <Text style={{ fontSize: 26 }}>{this.state.text}</Text>
        </View>
         

{/*----------------------Scroll Views------------------ */}

          <ScrollView style={styles.scrollview}>
            {this.state.List.map((item, index) => (

              <ScrollViewItem 
              key={item.key}
              activeOpacity={0.4}
              onPressIn={() => {
                this.setState({ text: item.data });
              }}
              itemData={item.data}
              indexData={index+1}
              onPressUpdate={()=>this.updateItem(item)}
              onPressDelete={()=>this.removeItem()}
              />
              
   {/*************           
            <TouchableOpacity
                key={item.key}
                activeOpacity={0.4}
                onPressIn={() => {
                  this.setState({ text: item.data });
                }}
              >
          {/*----------------------Scroll View Item ------------------ */}      

                <View style={styles.scrollviewItem}>

                  <View style={styles.scrollviewIndexAndData}>
                      <View style={styles.scrollviewIndexView}>
                        <Text style={styles.scrollviewIndexText}>{index + 1}</Text>
                      </View>
                      <Text style={styles.scrollviewText}>{item.data}</Text>
                  </View>
                  

                  <View style={styles.updateDeleteButtonContainer}>
                    
                     {/*----------------------Update Item------------------ */}

                  <TouchableOpacity onPress={() => this.updateItem(item)}>
                    <View style={styles.updateIconContainer}>
                      <MaterialIcons
                        name="update"
                        style={styles.updateDeleteText}
                      />
                    </View>
                  </TouchableOpacity>

                   {/*----------------------Remove Item------------------ */}
                   
                     <TouchableOpacity onPress={() => this.removeItem()}>
                    <View style={styles.deleteIconContainer}>
                      <AntDesign name="minus" style={styles.updateDeleteText} />
                    </View>
                     </TouchableOpacity>

                  </View>

                </View>
              </TouchableOpacity>  *************/}   


            ))}
          </ScrollView>
        </View>
      </TouchableWithoutFeedback>
    );
  }
}
const styles = StyleSheet.create({
   scrollviewIndexView: {
    backgroundColor: "grey",
    width: "10%",
    alignItems: "center",
    borderRadius: 50,
    justifyContent: "center",
  },
  scrollviewIndexText: {
    fontSize: 20,
    color: "white",
  },
  scrollviewIndexAndData:{
    flexDirection:"row",
    justifyContent:"flex-start",
    width:"70%",
  },
  updateDeleteButtonContainer:{
    flexDirection:"row",
    justifyContent:"space-between",
    width:"30%",
  },
  updateIconContainer: {
    backgroundColor: "#13517e",
    borderRadius: 50,
    padding: 5,
    width: 30,
    justifyContent: "center",
    alignItems: "center",
  },
  deleteIconContainer: {
    backgroundColor: "#c64c42",
    borderRadius: 50,
    padding: 5,
    width: 30,
    justifyContent: "center",
    alignItems: "center",
  },
  updateDeleteText: {
    fontSize: 16,
    color: "white",
    fontWeight: "bold",
  },
  scrollviewText: {
    fontSize: 26,
    color: "white",
    paddingLeft: 15,
  },
  scrollview: {
    paddingTop: 20,
    width: "100%",
  },
  scrollviewItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    backgroundColor: "#446d8b",
    alignSelf: "center",
    padding: 10,
    margin: 5,
    width: "90%",
    borderRadius: 10,
  },
  title: {
    fontSize: 64,
    color: "#0d5280",
  },
  container: {
    flex: 1,
    backgroundColor: "#e8b524",
    alignItems: "center",
    paddingTop: 40,
  },
});

export default App;


{/*--------------Second Component Changes----------------------*/}






import React, { Component } from "react";
import {
  StyleSheet,
  Text,
  Button,
  View,
  TextInput,
  ScrollView,
  TouchableOpacity,
  TouchableWithoutFeedback,
  Keyboard,
} from "react-native";
// import {
//   Entypo,
//   Ionicons,
//   FontAwesome,
//   AntDesign,
//   MaterialIcons,
// } from "@expo/vector-icons";
import Emoji from 'react-native-emoji';

import InputAddView from "./components/InputAddComponent";
import ScrollViewItem from "./components/ScrollViewItemComponent";

class App extends Component {
  state = {
    text: "",
    List: [],
    disableScrollViewItems:false,
  };

  handleInput = (text) => {
    this.setState({ text: text });
  };

  addItem = () => {
    const newList = [...this.state.List];
    newList.push({ key: Math.random().toString(), data: this.state.text });
    this.setState({ text: "", List: newList });
  };

  removeItem = (itemKey) => {
    const updatedList = [...this.state.List];
    updatedList.splice(itemKey, 1);
    this.setState({ List: updatedList,text:"" });
  };

  updateItem = (item) => {
    if (this.state.text === item.data || this.state.text === "") {
      alert(" Nothing to Update");
    } else {
      const updateItemIndex = this.state.List.findIndex((l) => {
        return l.key === item.key;
      });
      const updateItem = { ...this.state.List[updateItemIndex] };
      updateItem.data = this.state.text;
      const updatedItemList = [...this.state.List];
      updatedItemList[updateItemIndex] = updateItem;
      this.setState({ text: "", List: updatedItemList });
    }
  };

  disableEnableScrollViewItems = () => {
    if(this.state.disableScrollViewItems === false){
      this.setState({disableScrollViewItems:true});
    }
    else{
      this.setState({disableScrollViewItems:false});
    }
  };

  render() {
 {/*----------------------Scroll View------------------ */}
      const scrollView = (
      <ScrollView style={styles.scrollview}>
        {this.state.List.map((item, index) => (
          <ScrollViewItem
            key={item.key}
            activeOpacity={0.4}
            onPress={() => {
              this.setState({ text: item.data, disableScrollViewItems:true});
            }}
            disabled={this.state.disableScrollViewItems}
            itemData={item.data}
            indexData={index + 1}
            onPressUpdate={() => {this.updateItem(item); this.setState({disableScrollViewItems:false})}}
            onPressDelete={() => {this.removeItem(); this.setState({disableScrollViewItems:false})}}
          />
        ))}
      </ScrollView>
      );

        {/*----------------------Nothing In List View------------------ */}
      const emptyScrollView = (
         <View style={{flexDirection:"row",paddingTop:30}}> 
         <Text style={{fontSize:28,color:"grey",fontStyle:"italic"}}>
           No toDos. Enjoy! 
         </Text>          
         <Emoji name="sunglasses" style={{fontSize: 27, paddingLeft:10}}/>
       </View>
      );

    return (
      <TouchableWithoutFeedback
        onPress={() => {
          Keyboard.dismiss();
        }}
      >
        <View style={styles.container}>
          <Text style={styles.title}>My List</Text>
          <InputAddView
            placeholder="Enter toDo"
            changeText={this.handleInput}
            valueText={this.state.text}
            addItemProp={this.addItem}
            disabledEmptyInput = {this.state.text.length<=0}
          />
          <View>
            <Text style={{ fontSize: 26 }}>{this.state.text}</Text>
          </View>


          {/*----------------------Nothing In List View------------------ */}
          {/* <View style={{flexDirection:"row"}}> 
            <Text style={{fontSize:28,color:"grey",fontStyle:"italic"}}>
              No toDos. Enjoy! 
            </Text>          
            <Emoji name="sunglasses" style={{fontSize: 27, paddingLeft:10}}/>
          </View> */}
          {/*----------------------Scroll View------------------ */}

          {/* <ScrollView style={styles.scrollview}>
            {this.state.List.map((item, index) => (
              <ScrollViewItem
                key={item.key}
                activeOpacity={0.4}
                onPress={() => {
                  this.setState({ text: item.data, disableScrollViewItems:true});
                }}
                disabled={this.state.disableScrollViewItems}
                itemData={item.data}
                indexData={index + 1}
                onPressUpdate={() => {this.updateItem(item); this.setState({disableScrollViewItems:false})}}
                onPressDelete={() => {this.removeItem(); this.setState({disableScrollViewItems:false})}}
              />
            ))}
          </ScrollView> */}
          {this.state.List <=0 ? emptyScrollView : scrollView}
        </View>
      </TouchableWithoutFeedback>
    );
  }
}
const styles = StyleSheet.create({
  scrollviewIndexView: {
    backgroundColor: "grey",
    width: "10%",
    alignItems: "center",
    borderRadius: 50,
    justifyContent: "center",
  },
  scrollviewIndexText: {
    fontSize: 20,
    color: "white",
  },
  scrollviewIndexAndData: {
    flexDirection: "row",
    justifyContent: "flex-start",
    width: "70%",
  },
  updateDeleteButtonContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "30%",
  },
  updateIconContainer: {
    backgroundColor: "#13517e",
    borderRadius: 50,
    padding: 5,
    width: 30,
    justifyContent: "center",
    alignItems: "center",
  },
  deleteIconContainer: {
    backgroundColor: "#c64c42",
    borderRadius: 50,
    padding: 5,
    width: 30,
    justifyContent: "center",
    alignItems: "center",
  },
  updateDeleteText: {
    fontSize: 16,
    color: "white",
    fontWeight: "bold",
  },
  scrollviewText: {
    fontSize: 26,
    color: "white",
    paddingLeft: 15,
  },
  scrollview: {
    paddingTop: 20,
    width: "100%",
  },
  scrollviewItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    backgroundColor: "#446d8b",
    alignSelf: "center",
    padding: 10,
    margin: 5,
    width: "90%",
    borderRadius: 10,
  },
  title: {
    fontSize: 64,
    color: "#0d5280",
  },
  container: {
    flex: 1,
    backgroundColor: "#e8b524",
    alignItems: "center",
    paddingTop: 40,
  },
});

export default App;
